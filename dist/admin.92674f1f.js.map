{"mappings":"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","sources":["<anon>","src/js/admin.js"],"sourcesContent":["var $b8f9c3659b9148b6$exports = {};\n//code written by Anne-Lii Hansen VT 2024\n\"use strict\";\nconst $b8f9c3659b9148b6$var$foodUrl = \"https://backend-projekt-api-2zmb.onrender.com/api/foods\";\nconst $b8f9c3659b9148b6$var$drinkUrl = \"https://backend-projekt-api-2zmb.onrender.com/api/drinks\";\nconst $b8f9c3659b9148b6$var$bookingsUrl = \"https://backend-projekt-api-2zmb.onrender.com/api/bookings\";\nlet $b8f9c3659b9148b6$var$currentItem = null; //stores the current item beeing edited global\nlet $b8f9c3659b9148b6$var$isAddingNew = false; //flag for knowing if modal adds new or updates \nlet $b8f9c3659b9148b6$var$currentEditingBooking = null; // Declare a global variable to store the currently editing booking\nconst $b8f9c3659b9148b6$var$bookingSection = document.getElementById(\"bookingsection\");\nconst $b8f9c3659b9148b6$var$foodSection = document.getElementById(\"foodSection\");\nconst $b8f9c3659b9148b6$var$drinkSection = document.getElementById(\"drinkSection\");\nconst $b8f9c3659b9148b6$var$registrationSection = document.getElementById(\"registrationSection\");\n// Get the modals\nconst $b8f9c3659b9148b6$var$updateModal = document.getElementById(\"updateModal\"); //update food and drinks\nconst $b8f9c3659b9148b6$var$updateBookingModal = document.getElementById(\"updateBookingModal\"); //update bookings modal\nconst $b8f9c3659b9148b6$var$foodModal = document.getElementById(\"addFoodModal\"); //add food modal\nconst $b8f9c3659b9148b6$var$drinkModal = document.getElementById(\"addDrinkModal\"); //add drinks modal\nconst $b8f9c3659b9148b6$var$bookingForm = document.getElementById(\"bookingForm\"); //Booking Form to fill in\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    // Link to show and edit food\n    document.getElementById(\"link_edit_food\").addEventListener(\"click\", function(event) {\n        event.preventDefault();\n        fetchFoodItemsAndDraw(\"sm\\xe5r\\xe4tter\");\n        fetchFoodItemsAndDraw(\"varmr\\xe4tt\");\n        fetchFoodItemsAndDraw(\"dessert\");\n        //change this to display block and others to none\n        $b8f9c3659b9148b6$var$foodSection.style.display = \"block\";\n        $b8f9c3659b9148b6$var$bookingSection.style.display = \"none\";\n        $b8f9c3659b9148b6$var$drinkSection.style.display = \"none\";\n        $b8f9c3659b9148b6$var$registrationSection.style.display = \"none\";\n    });\n    // Link to show and edit drinks\n    document.getElementById(\"link_edit_drinks\").addEventListener(\"click\", function(event) {\n        event.preventDefault();\n        fetchDrinkItemsAndDraw(\"white\");\n        fetchDrinkItemsAndDraw(\"red\");\n        fetchDrinkItemsAndDraw(\"rose\");\n        fetchDrinkItemsAndDraw(\"champagne\");\n        fetchDrinkItemsAndDraw(\"drink\");\n        fetchDrinkItemsAndDraw(\"beer\");\n        fetchDrinkItemsAndDraw(\"alcoholfree\");\n        //change BOOKINGS display: block to none\n        $b8f9c3659b9148b6$var$bookingSection.style.display = \"none\";\n        //change FOOD display: block to none\n        $b8f9c3659b9148b6$var$foodSection.style.display = \"none\";\n        //change DRINK display: none to block\n        $b8f9c3659b9148b6$var$drinkSection.style.display = \"block\";\n        //change REGISTER display: block to none\n        $b8f9c3659b9148b6$var$registrationSection.style.display = \"none\";\n    });\n    async function fetchFoodItemsAndDraw(category) {\n        try {\n            const foodItems = await fetchItems($b8f9c3659b9148b6$var$foodUrl); // Hämta alla matobjekt            \n            const filteredFoodItems = foodItems.filter((item)=>item.category.toLowerCase() === category.toLowerCase());\n            drawItems(filteredFoodItems, getTableIdFromCategory(category)); // Rita matobjekt i rätt tabell baserat på kategori\n        } catch (error) {\n            console.error(\"Error fetching food items:\", error);\n        }\n    }\n    function getTableIdFromCategory(category) {\n        switch(category.toLowerCase()){\n            case \"sm\\xe5r\\xe4tter\":\n                return \"smallDishesTable\";\n            case \"varmr\\xe4tt\":\n                return \"mainCoursesTable\";\n            case \"dessert\":\n                return \"dessertTable\";\n            case \"white\":\n                return \"whiteTable\";\n            case \"red\":\n                return \"redTable\";\n            case \"rose\":\n                return \"roseTable\";\n            case \"champagne\":\n                return \"champagneTable\";\n            case \"drink\":\n                return \"drinkTable\";\n            case \"beer\":\n                return \"beerTable\";\n            case \"alcoholfree\":\n                return \"alcoholfreeTable\";\n            default:\n                return \"\";\n        }\n    }\n    async function fetchDrinkItemsAndDraw(category) {\n        try {\n            const drinkItems = await fetchItems($b8f9c3659b9148b6$var$drinkUrl);\n            // Filtera dryckesobjekten baserat på kategori\n            const filteredDrinkItems = drinkItems.filter((item)=>item.category.toLowerCase() === category.toLowerCase());\n            drawItems(filteredDrinkItems, getTableIdFromCategory(category));\n        } catch (error) {\n            console.error(\"Error fetching drink items:\", error);\n        }\n    }\n    async function fetchItems(url, type) {\n        try {\n            const response = await fetch(url);\n            console.log(`Response status for ${url}:`, response.status);\n            if (!response.ok) throw new Error(`Failed to fetch ${type} items`);\n            return response.json();\n        } catch (error) {\n            throw error;\n        }\n    }\n    function drawItems(items, tableId) {\n        const table = document.getElementById(tableId);\n        if (!table) {\n            console.error(`Table with id '${tableId}' not found.`);\n            return;\n        }\n        const tableBody = table.getElementsByTagName(\"tbody\")[0];\n        // Clear the existing rows in the table body\n        tableBody.innerHTML = \"\";\n        items.forEach((item)=>{\n            const row = tableBody.insertRow();\n            const cellCategory = row.insertCell(0);\n            const cellName = row.insertCell(1);\n            const cellDescription = row.insertCell(2);\n            const cellPrice = row.insertCell(3);\n            const cellEdit = row.insertCell(4);\n            const cellDelete = row.insertCell(5);\n            cellCategory.textContent = item.category;\n            cellName.textContent = item.food || item.drinkname;\n            cellDescription.textContent = item.description;\n            cellPrice.textContent = item.price;\n            const editButton = document.createElement(\"button\");\n            editButton.className = \"btn btn-edit\";\n            editButton.onclick = ()=>{\n                $b8f9c3659b9148b6$var$isAddingNew = false; // Set to false when editing\n                showModal(item);\n            };\n            cellEdit.appendChild(editButton);\n            const deleteButton = document.createElement(\"button\");\n            deleteButton.setAttribute(\"data-id\", item._id);\n            deleteButton.className = \"btn btn-delete\";\n            deleteButton.onclick = ()=>deleteItem(deleteButton.getAttribute(\"data-id\"), item.category, item.food ? \"food\" : \"drink\"); // Använd ID:et från data-attributet i deleteItem-funktionen\n            cellDelete.appendChild(deleteButton);\n        });\n        // Show the table after it has been filled\n        table.style.display = \"table\";\n    }\n    // Get the <span> element that closes the modal\n    const closeButtons = document.getElementsByClassName(\"close\");\n    // Add an event listener to each <span> to close the corresponding modal\n    for(let i = 0; i < closeButtons.length; i++)closeButtons[i].onclick = function() {\n        $b8f9c3659b9148b6$var$updateModal.style.display = \"none\";\n        $b8f9c3659b9148b6$var$foodModal.style.display = \"none\";\n        $b8f9c3659b9148b6$var$drinkModal.style.display = \"none\";\n        $b8f9c3659b9148b6$var$updateBookingModal.style.display = \"none\";\n    };\n    // When the user clicks anywhere outside of the modal, close it\n    window.onclick = function(event) {\n        if (event.target == $b8f9c3659b9148b6$var$updateModal) $b8f9c3659b9148b6$var$updateModal.style.display = \"none\";\n        else if (event.target == $b8f9c3659b9148b6$var$foodModal) $b8f9c3659b9148b6$var$foodModal.style.display = \"none\";\n        else if (event.target == $b8f9c3659b9148b6$var$drinkModal) $b8f9c3659b9148b6$var$drinkModal.style.display = \"none\";\n        else if (event.target == $b8f9c3659b9148b6$var$updateBookingModal) $b8f9c3659b9148b6$var$drinkModal.style.display = \"none\";\n    };\n    // Button to add new food item\n    document.getElementById(\"addFoodButton\").addEventListener(\"click\", ()=>{\n        $b8f9c3659b9148b6$var$isAddingNew = true;\n        showFoodModal({\n            category: \"\",\n            food: \"\",\n            description: \"\",\n            price: \"\"\n        }); // Set modal for adding new food\n    });\n    // Button to add new drink item\n    document.getElementById(\"addDrinkButton\").addEventListener(\"click\", ()=>{\n        $b8f9c3659b9148b6$var$isAddingNew = true;\n        showDrinkModal({\n            category: \"\",\n            drinkname: \"\",\n            description: \"\",\n            price: \"\"\n        }); // Set modal for adding new drink\n    });\n    function showModal(item) {\n        $b8f9c3659b9148b6$var$currentItem = item; // Store the current item being edited\n        document.getElementById(\"name\").value = item ? item.food || item.drinkname : \"\";\n        document.getElementById(\"description\").value = item ? item.description : \"\";\n        document.getElementById(\"price\").value = item ? item.price : \"\";\n        document.getElementById(\"category\").value = item ? item.category.toLowerCase() : \"\";\n        // Set the text of the submit button based on whether we're adding or updating an item\n        const submitBtn = document.getElementById(\"submitBtn\");\n        // Add event listener to update isAddingNew flag when submitting\n        submitBtn.addEventListener(\"click\", function() {\n            $b8f9c3659b9148b6$var$isAddingNew = false; // Change the value to false when updating\n        });\n        $b8f9c3659b9148b6$var$updateModal.style.display = \"block\";\n    }\n    function showFoodModal(item) {\n        $b8f9c3659b9148b6$var$currentItem = item; // Store the current item being edited\n        document.getElementById(\"foodname\").value = item ? item.food : \"\";\n        document.getElementById(\"fooddescription\").value = item ? item.description : \"\";\n        document.getElementById(\"foodprice\").value = item ? item.price : \"\";\n        document.getElementById(\"foodcategory\").value = item ? item.category : \"\";\n        // Set the text of the submit button based on whether we're adding or updating an item\n        const addFoodSubmitBtn = document.getElementById(\"addFoodSubmitBtn\");\n        // Add event listener to update isAddingNew flag when submitting\n        addFoodSubmitBtn.addEventListener(\"click\", async function() {\n            $b8f9c3659b9148b6$var$isAddingNew = true; // Change the value to false when updating\n            $b8f9c3659b9148b6$var$foodModal.style.display = \"none\"; // Hide the modal after adding\n        });\n        $b8f9c3659b9148b6$var$foodModal.style.display = \"block\";\n    }\n    function showDrinkModal(item) {\n        $b8f9c3659b9148b6$var$currentItem = item; // Store the current item being edited\n        document.getElementById(\"drinkname\").value = item ? item.drinkname : \"\";\n        document.getElementById(\"drinkdescription\").value = item ? item.description : \"\";\n        document.getElementById(\"drinkprice\").value = item ? item.price : \"\";\n        document.getElementById(\"drinkcategory\").value = item ? item.category : \"\";\n        // Set the text of the submit button based on whether we're adding or updating an item\n        const addDrinkSubmitBtn = document.getElementById(\"addDrinkSubmitBtn\");\n        // Add event listener to update isAddingNew flag when submitting\n        addDrinkSubmitBtn.addEventListener(\"click\", function() {\n            $b8f9c3659b9148b6$var$isAddingNew = true; // Change the value to false when updating\n            $b8f9c3659b9148b6$var$drinkModal.style.display = \"none\"; // Hide the modal after adding\n        });\n        $b8f9c3659b9148b6$var$drinkModal.style.display = \"block\";\n    }\n    // Händelselyssnare för att lägga till ny matpost\n    document.getElementById(\"foodForm\").addEventListener(\"submit\", async function(event) {\n        event.preventDefault();\n        // Check if all required fields have been filled\n        const name = document.getElementById(\"foodname\").value;\n        const description = document.getElementById(\"fooddescription\").value;\n        const price = document.getElementById(\"foodprice\").value;\n        if (!name || !description || !price) {\n            const modalFieldMessage = $b8f9c3659b9148b6$var$foodModal.querySelector(\".modalFieldMessage\");\n            modalFieldMessage.textContent = \"Alla f\\xe4lt m\\xe5ste fyllas i\";\n            modalFieldMessage.style.display = \"block\";\n            $b8f9c3659b9148b6$var$foodModal.style.display = \"block\";\n            return; // Stop further execution if required fields are not filled\n        } else {\n            const modalFieldMessage = $b8f9c3659b9148b6$var$foodModal.querySelector(\".modalFieldMessage\");\n            modalFieldMessage.style.display = \"none\";\n        }\n        // get values from foodForm\n        const foodItem = {\n            category: document.getElementById(\"foodcategory\").value,\n            food: document.getElementById(\"foodname\").value.toUpperCase(),\n            description: document.getElementById(\"fooddescription\").value,\n            price: document.getElementById(\"foodprice\").value\n        };\n        try {\n            const response = await fetch($b8f9c3659b9148b6$var$foodUrl, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(foodItem)\n            });\n            const data = await response.json();\n            console.log(\"New food item added:\", data);\n        } catch (error) {\n            console.error(\"Error adding new food item:\", error);\n        }\n        const selectedCategory = document.getElementById(\"foodcategory\").value.toLowerCase(); // Hämta vald kategori och gör om den till gemener\n        fetchFoodItemsAndDraw(selectedCategory); //update table\n    });\n    // Händelselyssnare för att lägga till ny dryckspost\n    document.getElementById(\"drinkForm\").addEventListener(\"submit\", async function(event) {\n        event.preventDefault();\n        // Check if all required fields have been filled\n        const name = document.getElementById(\"drinkname\").value;\n        const description = document.getElementById(\"drinkdescription\").value;\n        const price = document.getElementById(\"drinkprice\").value;\n        if (!name || !description || !price) {\n            const modalFieldMessage = $b8f9c3659b9148b6$var$drinkModal.querySelector(\".modalFieldMessage\");\n            modalFieldMessage.textContent = \"Alla f\\xe4lt m\\xe5ste fyllas i\";\n            modalFieldMessage.style.display = \"block\";\n            $b8f9c3659b9148b6$var$drinkModal.style.display = \"block\";\n            return; // Stop further execution if required fields are not filled\n        } else {\n            const modalFieldMessage = $b8f9c3659b9148b6$var$drinkModal.querySelector(\".modalFieldMessage\");\n            modalFieldMessage.style.display = \"none\";\n        }\n        // get values from drinkForm\n        const drinkItem = {\n            category: document.getElementById(\"drinkcategory\").value,\n            drinkname: document.getElementById(\"drinkname\").value.toUpperCase(),\n            description: document.getElementById(\"drinkdescription\").value,\n            price: document.getElementById(\"drinkprice\").value\n        };\n        // Skicka POST-anrop till dryck-API för att lägga till ny dryckspost\n        try {\n            const response = await fetch($b8f9c3659b9148b6$var$drinkUrl, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(drinkItem)\n            });\n            const data = await response.json();\n            console.log(\"New drink item added:\", data);\n        // Uppdatera dryckbordet eller gör någon annan åtgärd efter att ha lagt till drycksposten\n        } catch (error) {\n            console.error(\"Error adding new drink item:\", error);\n        }\n        const selectedCategory = document.getElementById(\"drinkcategory\").value.toLowerCase(); // Hämta vald kategori och gör om den till gemener\n        fetchDrinkItemsAndDraw(selectedCategory); //update table\n    });\n    //function to handle update of items from form\n    document.getElementById(\"updateForm\").addEventListener(\"submit\", async function(event) {\n        event.preventDefault();\n        // Check if all required fields have been filled\n        const name = document.getElementById(\"name\").value;\n        const description = document.getElementById(\"description\").value;\n        const price = document.getElementById(\"price\").value;\n        if (!name || !description || !price) {\n            const modalFieldMessage = document.querySelector(\".modalFieldMessage\");\n            modalFieldMessage.textContent = \"Alla f\\xe4lt m\\xe5ste fyllas i\";\n            modalFieldMessage.style.display = \"block\";\n            $b8f9c3659b9148b6$var$updateModal.style.display = \"block\";\n            return; // Stop further execution if required fields are not filled\n        } else {\n            const modalFieldMessage = document.querySelector(\".modalFieldMessage\");\n            modalFieldMessage.style.display = \"none\";\n        }\n        const updatedItem = {\n            food: $b8f9c3659b9148b6$var$currentItem.food ? document.getElementById(\"name\").value.toUpperCase() : undefined,\n            drinkname: $b8f9c3659b9148b6$var$currentItem.drinkname ? document.getElementById(\"name\").value.toUpperCase() : undefined,\n            description: document.getElementById(\"description\").value,\n            price: document.getElementById(\"price\").value,\n            category: document.getElementById(\"category\").value\n        };\n        const apiUrl = $b8f9c3659b9148b6$var$currentItem.food ? $b8f9c3659b9148b6$var$foodUrl : $b8f9c3659b9148b6$var$drinkUrl;\n        try {\n            const response = await fetch(`${apiUrl}/${$b8f9c3659b9148b6$var$currentItem._id}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(updatedItem)\n            });\n            if (!response.ok) throw new Error($b8f9c3659b9148b6$var$isAddingNew ? \"Failed to add new item\" : \"Failed to update item\");\n            const result = await response.json();\n            console.log(result);\n            // Refresh the list of items or update the table directly\n            if ($b8f9c3659b9148b6$var$currentItem.food || updatedItem.food) fetchFoodItemsAndDraw($b8f9c3659b9148b6$var$currentItem.category);\n            else fetchDrinkItemsAndDraw($b8f9c3659b9148b6$var$currentItem.category);\n            $b8f9c3659b9148b6$var$updateModal.style.display = \"none\";\n        } catch (error) {\n            console.error(\"Error updating or adding item:\", error);\n        }\n    });\n    //function to delete items from table\n    function deleteItem(id, category, type) {\n        const apiUrl = type === \"food\" ? $b8f9c3659b9148b6$var$foodUrl : $b8f9c3659b9148b6$var$drinkUrl;\n        fetch(`${apiUrl}/${id}`, {\n            method: \"DELETE\"\n        }).then((response)=>{\n            if (!response.ok) throw new Error(\"Failed to delete item\");\n            return response.json();\n        }).then((result)=>{\n            console.log(\"Deleted item:\", result);\n            // Refresh the list of items or update the table directly\n            if (type === \"food\") fetchFoodItemsAndDraw(category);\n            else fetchDrinkItemsAndDraw(category);\n        }).catch((error)=>{\n            console.error(\"Error deleting item:\", error);\n        });\n    }\n    //BOOKINGS\n    const bookingList = document.getElementById(\"bookingList\");\n    // Link to see bookings\n    document.getElementById(\"link_edit_bookings\").addEventListener(\"click\", function(event) {\n        event.preventDefault();\n        //change section displays\n        $b8f9c3659b9148b6$var$bookingSection.style.display = \"block\";\n        $b8f9c3659b9148b6$var$foodSection.style.display = \"none\";\n        $b8f9c3659b9148b6$var$drinkSection.style.display = \"none\";\n        // Fetch and display bookings\n        fetchBookings();\n    });\n    async function fetchBookings() {\n        try {\n            const response = await fetch($b8f9c3659b9148b6$var$bookingsUrl);\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            const bookings = await response.json();\n            updateBookingList(bookings);\n        } catch (error) {\n            console.error(\"Error fetching bookings: \", error);\n        }\n    }\n    function updateBookingList(bookings) {\n        // Sort bookings in bookingdates\n        bookings.sort((a, b)=>new Date(a.date) - new Date(b.date));\n        bookingList.innerHTML = \"\"; // Clear any existing bookings\n        bookings.forEach((booking)=>{\n            const listItem = document.createElement(\"li\");\n            listItem.innerHTML = `\r\n                <strong>Bokning:</strong> ${booking.name} <br>\r\n                <strong>Datum:</strong> ${new Date(booking.date).toLocaleDateString()} <br>\r\n                <strong>Tid:</strong> ${booking.time} <br>\r\n                <strong>Antal personer:</strong> ${booking.guests} <br>\r\n                <strong>Epost:</strong> ${booking.email} <br>\r\n                <strong>Telefonnummer:</strong> ${booking.phone} <br>\r\n                <strong>Skapad:</strong> ${new Date(booking.created).toLocaleDateString()} <br>\r\n            `;\n            const editButton = document.createElement(\"button\");\n            editButton.textContent = \"Redigera\";\n            editButton.addEventListener(\"click\", ()=>{\n                // Inside this listener, 'booking' is accessible\n                $b8f9c3659b9148b6$var$currentEditingBooking = booking;\n                editBooking(booking);\n            });\n            const deleteButton = document.createElement(\"button\");\n            deleteButton.textContent = \"Ta bort\";\n            deleteButton.addEventListener(\"click\", ()=>{\n                deleteBooking(booking._id);\n            });\n            // Add to DOM\n            listItem.appendChild(editButton);\n            listItem.appendChild(deleteButton);\n            bookingList.appendChild(listItem);\n        });\n    }\n    async function deleteBooking(id) {\n        try {\n            const response = await fetch(`${$b8f9c3659b9148b6$var$bookingsUrl}/${id}`, {\n                method: \"DELETE\"\n            });\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            fetchBookings(); // Refresh the booking list\n        } catch (error) {\n            console.error(\"Error deleting booking:\", error);\n        }\n    }\n    function editBooking(booking) {\n        //Change date format to YYY-MM-DD\n        const bookingDate = new Date(booking.date);\n        const formattedDate = bookingDate.toISOString().split(\"T\")[0];\n        // Populate the form fields with the details of the booking being edited\n        document.getElementById(\"bookingname\").value = booking.name;\n        document.getElementById(\"bookingemail\").value = booking.email;\n        document.getElementById(\"bookingphone\").value = booking.phone;\n        document.getElementById(\"bookingdate\").value = formattedDate;\n        document.getElementById(\"bookingtime\").value = booking.time;\n        document.getElementById(\"bookingguests\").value = booking.guests;\n        // Display the modal for editing\n        $b8f9c3659b9148b6$var$updateBookingModal.style.display = \"block\";\n    }\n    //Handle update of items from form\n    document.getElementById(\"updateBookingForm\").addEventListener(\"submit\", async function(event) {\n        event.preventDefault();\n        console.log(\" klickat p\\xe5 uppdatera\");\n        // Check if all required fields have been filled\n        const name = document.getElementById(\"bookingname\").value;\n        const email = document.getElementById(\"bookingemail\").value;\n        const phone = document.getElementById(\"bookingphone\").value;\n        const date = document.getElementById(\"bookingdate\").value;\n        const time = document.getElementById(\"bookingtime\").value;\n        const guests = document.getElementById(\"bookingguests\").value;\n        if (!name || !email || !phone || !date || !time || !guests) {\n            const modalFieldMessage = document.querySelector(\".modalFieldMessage\");\n            modalFieldMessage.textContent = \"Alla f\\xe4lt m\\xe5ste fyllas i\";\n            modalFieldMessage.style.display = \"block\";\n            $b8f9c3659b9148b6$var$updateBookingModal.style.display = \"block\";\n            return; // Stop further execution if required fields are not filled\n        } else document.querySelector(\".modalFieldMessage\").style.display = \"none\";\n        const updatedBookingItem = {\n            name: name,\n            email: email,\n            phone: phone,\n            date: date,\n            time: time,\n            guests: guests\n        };\n        console.log(updatedBookingItem);\n        try {\n            const response = await fetch(`${$b8f9c3659b9148b6$var$bookingsUrl}/${$b8f9c3659b9148b6$var$currentEditingBooking._id}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(updatedBookingItem)\n            });\n            if (!response.ok) throw new Error(\"Failed to update booking\");\n            await response.json();\n            fetchBookings(); // Refresh the list of items or update the table directly\n            $b8f9c3659b9148b6$var$updateBookingModal.style.display = \"none\";\n        } catch (error) {\n            console.error(\"Error updating or adding item:\", error);\n        }\n    });\n    window.addEventListener(\"click\", (event)=>{\n        if (event.target === $b8f9c3659b9148b6$var$updateBookingModal) $b8f9c3659b9148b6$var$updateBookingModal.style.display = \"none\";\n    });\n/*\r\n    //function to register a new admin\r\n    document.getElementById('registrationSection').addEventListener('click', function (event) {\r\n        event.preventDefault();\r\n\r\n        //change REGISTER display:none to block\r\n        document.getElementById('registrationSection').style.display = 'block';\r\n        //change FOOD display:block to none\r\n        document.getElementById('foodSection').style.display = 'none';\r\n        //change DRINK display:block to none\r\n        document.getElementById('drinkSection').style.display = 'none';\r\n\r\n    });\r\n*/ });\n\n\n//# sourceMappingURL=admin.92674f1f.js.map\n","//code written by Anne-Lii Hansen VT 2024\r\n\"use strict\";\r\n\r\nconst foodUrl = \"https://backend-projekt-api-2zmb.onrender.com/api/foods\";\r\nconst drinkUrl = \"https://backend-projekt-api-2zmb.onrender.com/api/drinks\";\r\nconst bookingsUrl = \"https://backend-projekt-api-2zmb.onrender.com/api/bookings\";\r\n\r\nlet currentItem = null;//stores the current item beeing edited global\r\nlet isAddingNew = false; //flag for knowing if modal adds new or updates \r\nlet currentEditingBooking = null;// Declare a global variable to store the currently editing booking\r\n\r\nconst bookingSection = document.getElementById('bookingsection');\r\nconst foodSection = document.getElementById('foodSection');\r\nconst drinkSection = document.getElementById('drinkSection');\r\nconst registrationSection = document.getElementById('registrationSection');\r\n\r\n // Get the modals\r\n const updateModal = document.getElementById(\"updateModal\");//update food and drinks\r\n const updateBookingModal = document.getElementById(\"updateBookingModal\"); //update bookings modal\r\n const foodModal = document.getElementById(\"addFoodModal\"); //add food modal\r\n const drinkModal = document.getElementById(\"addDrinkModal\");//add drinks modal\r\n\r\n const bookingForm = document.getElementById(\"bookingForm\");//Booking Form to fill in\r\n \r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\r\n    // Link to show and edit food\r\n    document.getElementById('link_edit_food').addEventListener('click', function (event) {\r\n        event.preventDefault();\r\n        fetchFoodItemsAndDraw(\"smårätter\");\r\n        fetchFoodItemsAndDraw(\"varmrätt\");\r\n        fetchFoodItemsAndDraw(\"dessert\");\r\n\r\n        //change this to display block and others to none\r\n        foodSection.style.display = 'block';\r\n        bookingSection.style.display = 'none';\r\n        drinkSection.style.display = 'none';\r\n        registrationSection.style.display = 'none';\r\n    });\r\n\r\n    // Link to show and edit drinks\r\n    document.getElementById('link_edit_drinks').addEventListener('click', function (event) {\r\n        event.preventDefault();\r\n        fetchDrinkItemsAndDraw(\"white\");\r\n        fetchDrinkItemsAndDraw(\"red\");\r\n        fetchDrinkItemsAndDraw(\"rose\");\r\n        fetchDrinkItemsAndDraw(\"champagne\");\r\n        fetchDrinkItemsAndDraw(\"drink\");\r\n        fetchDrinkItemsAndDraw(\"beer\");\r\n        fetchDrinkItemsAndDraw(\"alcoholfree\");\r\n\r\n        //change BOOKINGS display: block to none\r\n        bookingSection.style.display = 'none';\r\n        //change FOOD display: block to none\r\n        foodSection.style.display = 'none';\r\n        //change DRINK display: none to block\r\n        drinkSection.style.display = 'block';\r\n        //change REGISTER display: block to none\r\n        registrationSection.style.display = 'none';\r\n    });\r\n\r\n\r\n    async function fetchFoodItemsAndDraw(category) {\r\n\r\n        try {\r\n            const foodItems = await fetchItems(foodUrl); // Hämta alla matobjekt            \r\n            const filteredFoodItems = foodItems.filter(item => item.category.toLowerCase() === category.toLowerCase());\r\n            drawItems(filteredFoodItems, getTableIdFromCategory(category)); // Rita matobjekt i rätt tabell baserat på kategori\r\n        } catch (error) {\r\n            console.error('Error fetching food items:', error);\r\n        }\r\n    }\r\n\r\n    function getTableIdFromCategory(category) {\r\n        switch (category.toLowerCase()) {\r\n            case \"smårätter\":\r\n                return \"smallDishesTable\";\r\n            case \"varmrätt\":\r\n                return \"mainCoursesTable\";\r\n            case \"dessert\":\r\n                return \"dessertTable\";\r\n            case \"white\":\r\n                return \"whiteTable\";\r\n            case \"red\":\r\n                return \"redTable\";\r\n            case \"rose\":\r\n                return \"roseTable\";\r\n            case \"champagne\":\r\n                return \"champagneTable\";\r\n            case \"drink\":\r\n                return \"drinkTable\";\r\n            case \"beer\":\r\n                return \"beerTable\";\r\n            case \"alcoholfree\":\r\n                return \"alcoholfreeTable\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n\r\n    async function fetchDrinkItemsAndDraw(category) {\r\n        try {\r\n            const drinkItems = await fetchItems(drinkUrl);\r\n            // Filtera dryckesobjekten baserat på kategori\r\n            const filteredDrinkItems = drinkItems.filter(item => item.category.toLowerCase() === category.toLowerCase());\r\n            drawItems(filteredDrinkItems, getTableIdFromCategory(category));\r\n        } catch (error) {\r\n            console.error('Error fetching drink items:', error);\r\n        }\r\n    }\r\n\r\n\r\n    async function fetchItems(url, type) {\r\n        try {\r\n            const response = await fetch(url);\r\n            console.log(`Response status for ${url}:`, response.status);\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch ${type} items`);\r\n            }\r\n            return response.json();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    function drawItems(items, tableId) {\r\n        const table = document.getElementById(tableId);\r\n        if (!table) {\r\n            console.error(`Table with id '${tableId}' not found.`);\r\n            return;\r\n        }\r\n        const tableBody = table.getElementsByTagName('tbody')[0];\r\n\r\n\r\n        // Clear the existing rows in the table body\r\n        tableBody.innerHTML = \"\";\r\n\r\n\r\n\r\n\r\n        items.forEach(item => {\r\n            const row = tableBody.insertRow();\r\n            const cellCategory = row.insertCell(0);\r\n            const cellName = row.insertCell(1);\r\n            const cellDescription = row.insertCell(2);\r\n            const cellPrice = row.insertCell(3);\r\n            const cellEdit = row.insertCell(4);\r\n            const cellDelete = row.insertCell(5);\r\n\r\n            cellCategory.textContent = item.category;\r\n            cellName.textContent = item.food || item.drinkname;\r\n            cellDescription.textContent = item.description;\r\n            cellPrice.textContent = item.price;\r\n\r\n            const editButton = document.createElement('button');\r\n            editButton.className = 'btn btn-edit';\r\n            editButton.onclick = () => {\r\n                isAddingNew = false; // Set to false when editing\r\n                showModal(item);\r\n            };\r\n            cellEdit.appendChild(editButton);\r\n\r\n            const deleteButton = document.createElement('button');\r\n            deleteButton.setAttribute('data-id', item._id);\r\n            deleteButton.className = 'btn btn-delete';\r\n            deleteButton.onclick = () => deleteItem(deleteButton.getAttribute('data-id'), item.category, item.food ? 'food' : 'drink'); // Använd ID:et från data-attributet i deleteItem-funktionen\r\n            cellDelete.appendChild(deleteButton);\r\n        });\r\n\r\n        // Show the table after it has been filled\r\n        table.style.display = 'table';\r\n    }\r\n\r\n   \r\n\r\n    // Get the <span> element that closes the modal\r\n    const closeButtons = document.getElementsByClassName(\"close\");\r\n\r\n    // Add an event listener to each <span> to close the corresponding modal\r\n    for (let i = 0; i < closeButtons.length; i++) {\r\n        closeButtons[i].onclick = function () {\r\n            updateModal.style.display = \"none\";\r\n            foodModal.style.display = \"none\";\r\n            drinkModal.style.display = \"none\";\r\n            updateBookingModal.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    // When the user clicks anywhere outside of the modal, close it\r\n    window.onclick = function (event) {\r\n        if (event.target == updateModal) {\r\n            updateModal.style.display = \"none\";\r\n        } else if (event.target == foodModal) {\r\n            foodModal.style.display = \"none\";\r\n        } else if (event.target == drinkModal) {\r\n            drinkModal.style.display = \"none\";\r\n        }else if (event.target == updateBookingModal) {\r\n            drinkModal.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    // Button to add new food item\r\n    document.getElementById('addFoodButton').addEventListener('click', () => {\r\n        isAddingNew = true;\r\n        showFoodModal({ category: '', food: '', description: '', price: '' }); // Set modal for adding new food\r\n    });\r\n\r\n    // Button to add new drink item\r\n    document.getElementById('addDrinkButton').addEventListener('click', () => {\r\n        isAddingNew = true;\r\n        showDrinkModal({ category: '', drinkname: '', description: '', price: '' }); // Set modal for adding new drink\r\n    });\r\n\r\n    function showModal(item) {\r\n        currentItem = item; // Store the current item being edited\r\n        document.getElementById(\"name\").value = item ? (item.food || item.drinkname) : '';\r\n        document.getElementById(\"description\").value = item ? item.description : '';\r\n        document.getElementById(\"price\").value = item ? item.price : '';\r\n        document.getElementById(\"category\").value = item ? item.category.toLowerCase() : '';\r\n\r\n        // Set the text of the submit button based on whether we're adding or updating an item\r\n        const submitBtn = document.getElementById(\"submitBtn\");\r\n\r\n        // Add event listener to update isAddingNew flag when submitting\r\n        submitBtn.addEventListener(\"click\", function () {\r\n            isAddingNew = false; // Change the value to false when updating\r\n        });\r\n\r\n        updateModal.style.display = \"block\";\r\n    }\r\n\r\n    function showFoodModal(item) {\r\n        currentItem = item; // Store the current item being edited\r\n        document.getElementById(\"foodname\").value = item ? (item.food) : '';\r\n        document.getElementById(\"fooddescription\").value = item ? item.description : '';\r\n        document.getElementById(\"foodprice\").value = item ? item.price : '';\r\n        document.getElementById(\"foodcategory\").value = item ? item.category : '';\r\n\r\n        // Set the text of the submit button based on whether we're adding or updating an item\r\n        const addFoodSubmitBtn = document.getElementById(\"addFoodSubmitBtn\");\r\n\r\n        // Add event listener to update isAddingNew flag when submitting\r\n        addFoodSubmitBtn.addEventListener(\"click\", async function () {\r\n            isAddingNew = true; // Change the value to false when updating\r\n            foodModal.style.display = \"none\"; // Hide the modal after adding\r\n        });\r\n\r\n        foodModal.style.display = \"block\";\r\n    }\r\n\r\n    function showDrinkModal(item) {\r\n        currentItem = item; // Store the current item being edited\r\n        document.getElementById(\"drinkname\").value = item ? (item.drinkname) : '';\r\n        document.getElementById(\"drinkdescription\").value = item ? item.description : '';\r\n        document.getElementById(\"drinkprice\").value = item ? item.price : '';\r\n        document.getElementById(\"drinkcategory\").value = item ? item.category : '';\r\n\r\n        // Set the text of the submit button based on whether we're adding or updating an item\r\n        const addDrinkSubmitBtn = document.getElementById(\"addDrinkSubmitBtn\");\r\n\r\n        // Add event listener to update isAddingNew flag when submitting\r\n        addDrinkSubmitBtn.addEventListener(\"click\", function () {\r\n            isAddingNew = true; // Change the value to false when updating\r\n            drinkModal.style.display = \"none\"; // Hide the modal after adding\r\n        });\r\n\r\n        drinkModal.style.display = \"block\";\r\n    }\r\n\r\n    // Händelselyssnare för att lägga till ny matpost\r\n    document.getElementById('foodForm').addEventListener('submit', async function (event) {\r\n        event.preventDefault();\r\n\r\n        // Check if all required fields have been filled\r\n        const name = document.getElementById(\"foodname\").value;\r\n        const description = document.getElementById(\"fooddescription\").value;\r\n        const price = document.getElementById(\"foodprice\").value;\r\n\r\n        if (!name || !description || !price) {\r\n            const modalFieldMessage = foodModal.querySelector('.modalFieldMessage');\r\n            modalFieldMessage.textContent = 'Alla fält måste fyllas i';\r\n            modalFieldMessage.style.display = 'block';\r\n            foodModal.style.display = 'block';\r\n            return; // Stop further execution if required fields are not filled\r\n        } else {\r\n            const modalFieldMessage = foodModal.querySelector('.modalFieldMessage');\r\n            modalFieldMessage.style.display = 'none';\r\n        }\r\n\r\n        // get values from foodForm\r\n        const foodItem = {\r\n            category: document.getElementById('foodcategory').value,\r\n            food: document.getElementById('foodname').value.toUpperCase(),\r\n            description: document.getElementById('fooddescription').value,\r\n            price: document.getElementById('foodprice').value\r\n        };\r\n\r\n\r\n        try {\r\n            const response = await fetch(foodUrl, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(foodItem)\r\n            });\r\n\r\n            const data = await response.json();\r\n            console.log('New food item added:', data);\r\n\r\n\r\n        } catch (error) {\r\n            console.error('Error adding new food item:', error);\r\n        }\r\n\r\n        const selectedCategory = document.getElementById(\"foodcategory\").value.toLowerCase(); // Hämta vald kategori och gör om den till gemener\r\n        fetchFoodItemsAndDraw(selectedCategory);//update table\r\n    });\r\n\r\n\r\n    // Händelselyssnare för att lägga till ny dryckspost\r\n    document.getElementById('drinkForm').addEventListener('submit', async function (event) {\r\n        event.preventDefault();\r\n\r\n        // Check if all required fields have been filled\r\n        const name = document.getElementById(\"drinkname\").value;\r\n        const description = document.getElementById(\"drinkdescription\").value;\r\n        const price = document.getElementById(\"drinkprice\").value;\r\n\r\n        if (!name || !description || !price) {\r\n            const modalFieldMessage = drinkModal.querySelector('.modalFieldMessage');\r\n            modalFieldMessage.textContent = 'Alla fält måste fyllas i';\r\n            modalFieldMessage.style.display = 'block';\r\n            drinkModal.style.display = 'block';\r\n            return; // Stop further execution if required fields are not filled\r\n        } else {\r\n            const modalFieldMessage = drinkModal.querySelector('.modalFieldMessage');\r\n            modalFieldMessage.style.display = 'none';\r\n        }\r\n\r\n        // get values from drinkForm\r\n        const drinkItem = {\r\n            category: document.getElementById('drinkcategory').value,\r\n            drinkname: document.getElementById('drinkname').value.toUpperCase(),\r\n            description: document.getElementById('drinkdescription').value,\r\n            price: document.getElementById('drinkprice').value\r\n        };\r\n\r\n        // Skicka POST-anrop till dryck-API för att lägga till ny dryckspost\r\n     \r\n        try {\r\n            const response = await fetch(drinkUrl, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(drinkItem)\r\n            });\r\n\r\n            const data = await response.json();\r\n            console.log('New drink item added:', data);\r\n\r\n            // Uppdatera dryckbordet eller gör någon annan åtgärd efter att ha lagt till drycksposten\r\n        } catch (error) {\r\n            console.error('Error adding new drink item:', error);\r\n        }\r\n\r\n        const selectedCategory = document.getElementById(\"drinkcategory\").value.toLowerCase(); // Hämta vald kategori och gör om den till gemener\r\n        fetchDrinkItemsAndDraw(selectedCategory);//update table\r\n    });\r\n\r\n\r\n\r\n    //function to handle update of items from form\r\n    document.getElementById(\"updateForm\").addEventListener(\"submit\", async function (event) {\r\n        event.preventDefault();\r\n\r\n        // Check if all required fields have been filled\r\n        const name = document.getElementById(\"name\").value;\r\n        const description = document.getElementById(\"description\").value;\r\n        const price = document.getElementById(\"price\").value;\r\n\r\n        if (!name || !description || !price) {\r\n            const modalFieldMessage = document.querySelector('.modalFieldMessage');\r\n            modalFieldMessage.textContent = 'Alla fält måste fyllas i';\r\n            modalFieldMessage.style.display = 'block';\r\n            updateModal.style.display = \"block\";\r\n            return; // Stop further execution if required fields are not filled\r\n        } else {\r\n            const modalFieldMessage = document.querySelector('.modalFieldMessage');\r\n            modalFieldMessage.style.display = 'none';\r\n        }\r\n\r\n        const updatedItem = {\r\n            food: currentItem.food ? document.getElementById(\"name\").value.toUpperCase() : undefined,\r\n            drinkname: currentItem.drinkname ? document.getElementById(\"name\").value.toUpperCase() : undefined,\r\n            description: document.getElementById(\"description\").value,\r\n            price: document.getElementById(\"price\").value,\r\n            category: document.getElementById(\"category\").value\r\n        };\r\n\r\n        const apiUrl = currentItem.food ? foodUrl : drinkUrl;\r\n\r\n        try {\r\n            const response = await fetch(`${apiUrl}/${currentItem._id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(updatedItem)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(isAddingNew ? 'Failed to add new item' : 'Failed to update item');\r\n            }\r\n\r\n            const result = await response.json();\r\n            console.log(result);\r\n\r\n            // Refresh the list of items or update the table directly\r\n            if (currentItem.food || updatedItem.food) {\r\n                fetchFoodItemsAndDraw(currentItem.category);\r\n            } else {\r\n                fetchDrinkItemsAndDraw(currentItem.category);\r\n            }\r\n\r\n            updateModal.style.display = \"none\";\r\n\r\n        } catch (error) {\r\n            console.error('Error updating or adding item:', error);\r\n        }\r\n\r\n    });\r\n\r\n    //function to delete items from table\r\n    function deleteItem(id, category, type) {\r\n        const apiUrl = type === 'food' ? foodUrl : drinkUrl;\r\n\r\n        fetch(`${apiUrl}/${id}`, {\r\n            method: 'DELETE'\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to delete item');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(result => {\r\n                console.log('Deleted item:', result);\r\n\r\n                // Refresh the list of items or update the table directly\r\n                if (type === 'food') {\r\n                    fetchFoodItemsAndDraw(category);\r\n                } else {\r\n                    fetchDrinkItemsAndDraw(category);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error('Error deleting item:', error);\r\n            });\r\n    }\r\n    //BOOKINGS\r\n    const bookingList = document.getElementById('bookingList');\r\n\r\n    // Link to see bookings\r\n    document.getElementById('link_edit_bookings').addEventListener('click', function (event) {\r\n        event.preventDefault();\r\n\r\n        //change section displays\r\n        bookingSection.style.display = 'block';\r\n        foodSection.style.display = 'none';\r\n        drinkSection.style.display = 'none';\r\n\r\n        // Fetch and display bookings\r\n        fetchBookings();\r\n\r\n    });\r\n\r\n    async function fetchBookings() {\r\n        try {\r\n            const response = await fetch(bookingsUrl);\r\n            if (!response.ok) {\r\n                throw new Error(\"Network response was not ok\");\r\n            }\r\n            const bookings = await response.json();\r\n            updateBookingList(bookings);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching bookings: \", error)\r\n        }\r\n    }\r\n\r\n    function updateBookingList(bookings) {\r\n\r\n         // Sort bookings in bookingdates\r\n        bookings.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n        bookingList.innerHTML = ''; // Clear any existing bookings\r\n        bookings.forEach(booking => {\r\n            const listItem = document.createElement('li');\r\n\r\n            listItem.innerHTML = `\r\n                <strong>Bokning:</strong> ${booking.name} <br>\r\n                <strong>Datum:</strong> ${new Date(booking.date).toLocaleDateString()} <br>\r\n                <strong>Tid:</strong> ${booking.time} <br>\r\n                <strong>Antal personer:</strong> ${booking.guests} <br>\r\n                <strong>Epost:</strong> ${booking.email} <br>\r\n                <strong>Telefonnummer:</strong> ${booking.phone} <br>\r\n                <strong>Skapad:</strong> ${new Date(booking.created).toLocaleDateString()} <br>\r\n            `;\r\n\r\n            const editButton = document.createElement('button');\r\n            editButton.textContent = 'Redigera';\r\n            editButton.addEventListener('click', () => {\r\n                // Inside this listener, 'booking' is accessible\r\n                currentEditingBooking = booking;\r\n                editBooking(booking);\r\n            });\r\n\r\n            const deleteButton = document.createElement('button');\r\n            deleteButton.textContent = 'Ta bort';\r\n            deleteButton.addEventListener('click', () => {\r\n                deleteBooking(booking._id);\r\n            });\r\n\r\n            // Add to DOM\r\n            listItem.appendChild(editButton);\r\n            listItem.appendChild(deleteButton);\r\n            bookingList.appendChild(listItem); \r\n        });\r\n    }\r\n\r\n    async function deleteBooking(id) {\r\n        try {\r\n            const response = await fetch(`${bookingsUrl}/${id}`, {\r\n                method: 'DELETE'\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            fetchBookings(); // Refresh the booking list\r\n        } catch (error) {\r\n            console.error('Error deleting booking:', error);\r\n        }\r\n    }\r\n\r\n    function editBooking(booking) {\r\n\r\n         //Change date format to YYY-MM-DD\r\n         const bookingDate = new Date(booking.date);\r\n         const formattedDate = bookingDate.toISOString().split(\"T\")[0];\r\n\r\n        // Populate the form fields with the details of the booking being edited\r\n        document.getElementById(\"bookingname\").value = booking.name;\r\n        document.getElementById(\"bookingemail\").value = booking.email;\r\n        document.getElementById(\"bookingphone\").value = booking.phone;\r\n        document.getElementById(\"bookingdate\").value = formattedDate;\r\n        document.getElementById(\"bookingtime\").value = booking.time;\r\n        document.getElementById(\"bookingguests\").value = booking.guests;\r\n\r\n        // Display the modal for editing\r\n        \r\n        updateBookingModal.style.display = \"block\";\r\n    }\r\n\r\n    //Handle update of items from form\r\n    document.getElementById(\"updateBookingForm\").addEventListener(\"submit\", async function (event) {\r\n        event.preventDefault();\r\n\r\n        console.log(\" klickat på uppdatera\");\r\n\r\n        // Check if all required fields have been filled\r\n        const name = document.getElementById(\"bookingname\").value;\r\n        const email = document.getElementById(\"bookingemail\").value;\r\n        const phone = document.getElementById(\"bookingphone\").value;\r\n        const date = document.getElementById(\"bookingdate\").value;\r\n        const time = document.getElementById(\"bookingtime\").value;\r\n        const guests = document.getElementById(\"bookingguests\").value;\r\n\r\n        if (!name || !email || !phone || !date || !time || !guests) {\r\n            const modalFieldMessage = document.querySelector('.modalFieldMessage');\r\n            modalFieldMessage.textContent = 'Alla fält måste fyllas i';\r\n            modalFieldMessage.style.display = 'block';\r\n            updateBookingModal.style.display = \"block\";\r\n            return; // Stop further execution if required fields are not filled\r\n        } else {\r\n            document.querySelector('.modalFieldMessage').style.display = 'none';\r\n        }\r\n\r\n        const updatedBookingItem = { name, email, phone, date, time, guests };\r\n        console.log(updatedBookingItem);\r\n\r\n        try {\r\n            const response = await fetch(`${bookingsUrl}/${currentEditingBooking._id}`, {\r\n                method: 'PUT',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify(updatedBookingItem)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to update booking');\r\n            }\r\n            await response.json();\r\n           \r\n            fetchBookings();// Refresh the list of items or update the table directly\r\n            updateBookingModal.style.display = \"none\";\r\n        } catch (error) {\r\n            console.error('Error updating or adding item:', error);\r\n        }\r\n    });\r\n\r\n    window.addEventListener(\"click\", (event) => {\r\n        if (event.target === updateBookingModal) {\r\n            updateBookingModal.style.display = \"none\";\r\n        }\r\n    });\r\n\r\n\r\n\r\n    /*\r\n    //function to register a new admin\r\n    document.getElementById('registrationSection').addEventListener('click', function (event) {\r\n        event.preventDefault();\r\n\r\n        //change REGISTER display:none to block\r\n        document.getElementById('registrationSection').style.display = 'block';\r\n        //change FOOD display:block to none\r\n        document.getElementById('foodSection').style.display = 'none';\r\n        //change DRINK display:block to none\r\n        document.getElementById('drinkSection').style.display = 'none';\r\n\r\n    });\r\n*/\r\n\r\n});\r\n"],"names":["$b8f9c3659b9148b6$var$foodUrl","$b8f9c3659b9148b6$var$drinkUrl","$b8f9c3659b9148b6$var$bookingsUrl","$b8f9c3659b9148b6$var$currentItem","$b8f9c3659b9148b6$var$isAddingNew","$b8f9c3659b9148b6$var$currentEditingBooking","$b8f9c3659b9148b6$var$bookingSection","document","getElementById","$b8f9c3659b9148b6$var$foodSection","$b8f9c3659b9148b6$var$drinkSection","$b8f9c3659b9148b6$var$registrationSection","$b8f9c3659b9148b6$var$updateModal","$b8f9c3659b9148b6$var$updateBookingModal","$b8f9c3659b9148b6$var$foodModal","$b8f9c3659b9148b6$var$drinkModal","addEventListener","fetchFoodItemsAndDraw","category","filteredFoodItems","foodItems","fetchItems","filter","item","toLowerCase","drawItems","getTableIdFromCategory","error","console","fetchDrinkItemsAndDraw","filteredDrinkItems","drinkItems","url","type","response","fetch","log","status","ok","Error","json","items","tableId","table","tableBody","getElementsByTagName","innerHTML","forEach","row","insertRow","cellCategory","insertCell","cellName","cellDescription","cellPrice","cellEdit","cellDelete","textContent","food","drinkname","description","price","editButton","createElement","className","onclick","value","submitBtn","style","display","appendChild","deleteButton","setAttribute","_id","deleteItem","id","apiUrl","method","then","result","catch","getAttribute","event","preventDefault","closeButtons","getElementsByClassName","i","length","window","target","addFoodSubmitBtn","addDrinkSubmitBtn","name","modalFieldMessage","querySelector","foodItem","toUpperCase","headers","body","JSON","stringify","data","drinkItem","updatedItem","undefined","bookingList","fetchBookings","bookings","sort","a","b","Date","date","booking","listItem","toLocaleDateString","time","guests","email","phone","created","editBooking","formattedDate","bookingDate","toISOString","split","deleteBooking","updatedBookingItem"],"version":3,"file":"admin.92674f1f.js.map"}