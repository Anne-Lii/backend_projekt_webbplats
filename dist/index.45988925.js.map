{"mappings":"ACG0B,SAAS,aAAa,CAAC,sBAEjD,SAAS,gBAAgB,CAAC,mBAAoB,WAG1C,IAAM,EAAc,SAAS,cAAc,CAAC,eACtC,EAAiB,SAAS,cAAc,CAAC,kBAE3C,GACA,EAAY,gBAAgB,CAAC,SAAU,eAAgB,CAAK,EACxD,EAAM,cAAc,GAEpB,IAAM,EAAO,SAAS,cAAc,CAAC,QAAQ,KAAK,CAC5C,EAAQ,SAAS,cAAc,CAAC,SAAS,KAAK,CAC9C,EAAQ,SAAS,cAAc,CAAC,SAAS,KAAK,CAC9C,EAAO,SAAS,cAAc,CAAC,QAAQ,KAAK,CAC5C,EAAO,SAAS,cAAc,CAAC,QAAQ,KAAK,CAC5C,EAAS,SAAS,cAAc,CAAC,UAAU,KAAK,CAEtD,GAAI,AAAC,GAAS,GAAU,GAAU,GAAS,GAAS,EAKhD,EAAe,KAAK,CAAC,OAAO,CAAG,WALyB,CACxD,EAAe,WAAW,CAAG,2BAC7B,EAAe,KAAK,CAAC,OAAO,CAAG,QAC/B,MACJ,CAOA,GAAI,CACA,IAAM,EAAW,MAAM,MAhCnB,6DAgCsC,CACtC,OAAQ,OACR,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,KAAM,KAAK,SAAS,CANT,CAAE,KAAA,EAAM,MAAA,EAAO,MAAA,EAAO,KAAA,EAAM,KAAA,EAAM,OAAA,CAAO,EAOxD,GAGA,GAAI,CAAC,EAAS,EAAE,CACZ,MAAM,AAAI,MAAM,CAAC,oBAAoB,EAAE,EAAS,MAAM,CAAC,CAAC,CAE5D,OAAM,EAAS,IAAI,GAGnB,EAAY,KAAK,GAGZ,IAED,EAAe,WAAW,CAAG,+BAC7B,EAAe,KAAK,CAAC,OAAO,CAAG,QAEvC,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,4BAA6B,EAC/C,CACJ,GAKH,AADoB,SAAS,gBAAgB,CAAC,SAClC,OAAO,CAAC,AAAA,IAChB,EAAM,gBAAgB,CAAC,QAAS,WAC5B,EAAe,WAAW,CAAG,GAC7B,EAAe,KAAK,CAAC,OAAO,CAAG,MACnC,EACJ,EACL","sources":["<anon>","src/js/addBooking.js"],"sourcesContent":["var $079e64b8a458c1ee$exports = {};\n\"use strict\";\nconst $079e64b8a458c1ee$var$bookingsUrl = \"https://backend-projekt-api-2zmb.onrender.com/api/bookings\";\nconst $079e64b8a458c1ee$var$modalFieldMessage = document.querySelector(\".modalFieldMessage\");\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Add new booking   \n    const bookingForm = document.getElementById(\"bookingForm\");\n    const messageBooking = document.getElementById(\"messageBooking\");\n    if (bookingForm) bookingForm.addEventListener(\"submit\", async function(event) {\n        event.preventDefault();\n        // Check if all required fields have been filled\n        const name = document.getElementById(\"name\").value;\n        const email = document.getElementById(\"email\").value;\n        const phone = document.getElementById(\"phone\").value;\n        const date = document.getElementById(\"date\").value;\n        const time = document.getElementById(\"time\").value;\n        const guests = document.getElementById(\"guests\").value;\n        if (!name || !email || !phone || !date || !time || !guests) {\n            messageBooking.textContent = \"Alla f\\xe4lt m\\xe5ste fyllas i\";\n            messageBooking.style.display = \"block\";\n            return; // Stoppa vidare utförande om nödvändiga fält inte är ifyllda\n        } else messageBooking.style.display = \"none\";\n        // Get values from bookingForm\n        const newBooking = {\n            name: name,\n            email: email,\n            phone: phone,\n            date: date,\n            time: time,\n            guests: guests\n        };\n        try {\n            const response = await fetch($079e64b8a458c1ee$var$bookingsUrl, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(newBooking)\n            });\n            // Ensure the response is OK (status 200-299)\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            await response.json();\n            // Reset the form after successful submission\n            bookingForm.reset();\n            // Show success message\n            if (messageBooking) {\n                messageBooking.textContent = \"Din bokning har registrerats\";\n                messageBooking.style.display = \"block\";\n            }\n        } catch (error) {\n            console.error(\"Error adding new booking:\", error);\n        }\n    });\n    // Add event listeners to input fields to reset message when clicked\n    const inputFields = document.querySelectorAll(\"input\");\n    inputFields.forEach((input)=>{\n        input.addEventListener(\"click\", function() {\n            messageBooking.textContent = \"\"; // Reset message\n            messageBooking.style.display = \"none\"; // Hide message\n        });\n    });\n});\n\n\n//# sourceMappingURL=index.45988925.js.map\n","\"use strict\"\r\n\r\nconst bookingsUrl = \"https://backend-projekt-api-2zmb.onrender.com/api/bookings\";\r\nconst modalFieldMessage = document.querySelector('.modalFieldMessage');\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n\r\n    // Add new booking   \r\n    const bookingForm = document.getElementById('bookingForm');\r\n    const messageBooking = document.getElementById('messageBooking');\r\n\r\n    if (bookingForm) {\r\n        bookingForm.addEventListener('submit', async function (event) {\r\n            event.preventDefault();\r\n            // Check if all required fields have been filled\r\n            const name = document.getElementById(\"name\").value;\r\n            const email = document.getElementById(\"email\").value;\r\n            const phone = document.getElementById(\"phone\").value;\r\n            const date = document.getElementById(\"date\").value;\r\n            const time = document.getElementById(\"time\").value;\r\n            const guests = document.getElementById(\"guests\").value;\r\n\r\n            if (!name || !email || !phone || !date || !time || !guests) {\r\n                messageBooking.textContent = 'Alla fält måste fyllas i';\r\n                messageBooking.style.display = 'block';\r\n                return; // Stoppa vidare utförande om nödvändiga fält inte är ifyllda\r\n            } else {\r\n                messageBooking.style.display = 'none';\r\n            }\r\n\r\n            // Get values from bookingForm\r\n            const newBooking = { name, email, phone, date, time, guests };\r\n\r\n            try {\r\n                const response = await fetch(bookingsUrl, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(newBooking)\r\n                });\r\n\r\n                // Ensure the response is OK (status 200-299)\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                await response.json();\r\n\r\n                // Reset the form after successful submission\r\n                bookingForm.reset();\r\n\r\n                // Show success message\r\n                if ( messageBooking) {\r\n                \r\n                    messageBooking.textContent = 'Din bokning har registrerats';\r\n                    messageBooking.style.display = 'block';\r\n                } \r\n            } catch (error) {\r\n                console.error('Error adding new booking:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n     // Add event listeners to input fields to reset message when clicked\r\n     const inputFields = document.querySelectorAll('input');\r\n     inputFields.forEach(input => {\r\n         input.addEventListener('click', function () {\r\n             messageBooking.textContent = ''; // Reset message\r\n             messageBooking.style.display = 'none'; // Hide message\r\n         });\r\n     });\r\n});\r\n"],"names":["document","querySelector","addEventListener","bookingForm","getElementById","messageBooking","event","preventDefault","name","value","email","phone","date","time","guests","style","display","textContent","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","reset","error","console","inputFields","querySelectorAll","forEach","input"],"version":3,"file":"index.45988925.js.map"}