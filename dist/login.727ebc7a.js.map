{"mappings":"ACGA,SAAS,gBAAgB,CAAC,mBAAoB,KAG1C,IAAM,EAAY,SAAS,cAAc,CAAC,aACpC,EAAe,SAAS,cAAc,CAAC,gBACvC,EAAiB,SAAS,cAAc,CAAC,kBAK3C,GACA,EAAU,gBAAgB,CAAC,SAAU,eAAgB,CAAK,EACtD,EAAM,cAAc,GAGhB,IAEA,EAAe,SAAS,CAAG,UAE3B,EAAe,SAAS,CAAG,WAC3B,WAAW,KACP,EAAe,SAAS,CAAG,WAC/B,EAAG,KACH,WAAW,KACP,EAAe,SAAS,CAAG,YAC/B,EAAG,MAIP,IAAM,EAAW,SAAS,cAAc,CAAC,YAAY,KAAK,CACpD,EAAW,SAAS,cAAc,CAAC,YAAY,KAAK,CAE1D,GAAI,CAEA,IAAM,EAAW,MAAM,MAAM,0DAAgB,CACzC,OAAQ,OACR,QAAS,CACL,eAAgB,kBACpB,EACA,KAAM,KAAK,SAAS,CAAC,CACjB,SAAU,EACV,SAAU,CACd,EACJ,GAGA,GAAI,EAAS,EAAE,CAAE,CAEb,IAAM,EAAQ,AADD,CAAA,MAAM,EAAS,IAAI,EAAhC,EACmB,KAAK,CAGxB,aAAa,OAAO,CAAC,QAAS,GAG9B,aAAa,OAAO,CAAC,WAAY,GAGjC,EAAa,SAAS,CAAG,GACrB,GAAgB,CAAA,EAAe,SAAS,CAAG,EAA/C,EAGmB,aAAa,OAAO,CAAC,SAQpC,OAAO,QAAQ,CAAC,IAAI,CAAG,aAJvB,OAAO,QAAQ,CAAC,IAAI,CAAG,YAO/B,KAAO,CACH,IAAM,EAAe,MAAM,EAAS,IAAI,EACxC,CAAA,EAAa,WAAW,CAAG,EAAa,KAAK,AACjD,CAEJ,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,kBAAmB,GACjC,EAAa,WAAW,CAAG,0DAC/B,CACJ,EAER","sources":["<anon>","src/js/login.js"],"sourcesContent":["var $27435ee7e70aa165$exports = {};\n//code written by Anne-Lii Hansen VT 2024\n\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const loginForm = document.getElementById(\"loginForm\"); //get form for login\n    const loginMessage = document.getElementById(\"loginMessage\");\n    const loadingMessage = document.getElementById(\"loadingMessage\");\n    const url = \"https://backend-projekt-api-2zmb.onrender.com/api\";\n    //event submit loginForm\n    if (loginForm) loginForm.addEventListener(\"submit\", async function(event) {\n        event.preventDefault(); //prevent standard form behavior\n        //Text \"Loading\" shows while awaiting fetch\n        if (loadingMessage) {\n            loadingMessage.innerText = \"Loading\";\n            loadingMessage.innerText = \"Loading.\";\n            setTimeout(()=>{\n                loadingMessage.innerText = \"Loading..\";\n            }, 500);\n            setTimeout(()=>{\n                loadingMessage.innerText = \"Loading...\";\n            }, 1000);\n        }\n        // Get username and password from inlogForm\n        const username = document.getElementById(\"username\").value;\n        const password = document.getElementById(\"password\").value;\n        try {\n            //send inlog to API\n            const response = await fetch(url + \"/login\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    username: username,\n                    password: password\n                })\n            });\n            // Check if inlog was succesful\n            if (response.ok) {\n                const data = await response.json();\n                const token = data.token;\n                // save token in localStorage\n                localStorage.setItem(\"token\", token);\n                //save username in localstorage\n                localStorage.setItem(\"username\", username);\n                //clear messages\n                loginMessage.innerHTML = \"\";\n                if (loadingMessage) loadingMessage.innerText = \"\";\n                // check if user is authenticated\n                const localtoken = localStorage.getItem(\"token\");\n                if (!localtoken) //unvalid JTW message redirect to login\n                window.location.href = \"login.html\";\n                else // Redirect user to admin protected route\n                window.location.href = \"admin.html\";\n            } else {\n                const errorMessage = await response.json();\n                loginMessage.textContent = errorMessage.error;\n            }\n        } catch (error) {\n            console.error(\"Inloggningsfel:\", error);\n            loginMessage.textContent = \"Ett fel intr\\xe4ffade vid inloggningen. F\\xf6rs\\xf6k igen senare.\";\n        }\n    });\n});\n\n\n//# sourceMappingURL=login.727ebc7a.js.map\n","//code written by Anne-Lii Hansen VT 2024\r\n\"use strict\"\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\r\n\r\n    const loginForm = document.getElementById(\"loginForm\");//get form for login\r\n    const loginMessage = document.getElementById(\"loginMessage\");\r\n    const loadingMessage = document.getElementById(\"loadingMessage\");\r\n\r\n    const url = \"https://backend-projekt-api-2zmb.onrender.com/api\";\r\n\r\n    //event submit loginForm\r\n    if (loginForm) {\r\n        loginForm.addEventListener(\"submit\", async function (event) {\r\n            event.preventDefault();//prevent standard form behavior\r\n\r\n            //Text \"Loading\" shows while awaiting fetch\r\n            if (loadingMessage) {\r\n\r\n                loadingMessage.innerText = \"Loading\";\r\n\r\n                loadingMessage.innerText = \"Loading.\";\r\n                setTimeout(() => {\r\n                    loadingMessage.innerText = \"Loading..\";\r\n                }, 500);\r\n                setTimeout(() => {\r\n                    loadingMessage.innerText = \"Loading...\";\r\n                }, 1000);\r\n            }\r\n\r\n            // Get username and password from inlogForm\r\n            const username = document.getElementById(\"username\").value;\r\n            const password = document.getElementById(\"password\").value;\r\n\r\n            try {\r\n                //send inlog to API\r\n                const response = await fetch(url + \"/login\", {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify({\r\n                        username: username,\r\n                        password: password\r\n                    })\r\n                });\r\n\r\n                // Check if inlog was succesful\r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    const token = data.token;\r\n\r\n                    // save token in localStorage\r\n                    localStorage.setItem(\"token\", token);\r\n\r\n                    //save username in localstorage\r\n                    localStorage.setItem(\"username\", username);\r\n\r\n                    //clear messages\r\n                    loginMessage.innerHTML = \"\";\r\n                    if (loadingMessage) loadingMessage.innerText = \"\";\r\n\r\n                    // check if user is authenticated\r\n                    const localtoken = localStorage.getItem(\"token\");\r\n                    if (!localtoken) {\r\n\r\n                        //unvalid JTW message redirect to login\r\n                        window.location.href = \"login.html\";\r\n\r\n                    } else {\r\n                        // Redirect user to admin protected route\r\n                        window.location.href = \"admin.html\";\r\n                    }\r\n\r\n                } else {\r\n                    const errorMessage = await response.json();\r\n                    loginMessage.textContent = errorMessage.error;\r\n                }\r\n\r\n            } catch (error) {\r\n                console.error('Inloggningsfel:', error);\r\n                loginMessage.textContent = 'Ett fel inträffade vid inloggningen. Försök igen senare.';\r\n            }\r\n        });\r\n    }\r\n});\r\n"],"names":["document","addEventListener","loginForm","getElementById","loginMessage","loadingMessage","event","preventDefault","innerText","setTimeout","username","value","password","response","fetch","url","method","headers","body","JSON","stringify","ok","token","data","json","localStorage","setItem","innerHTML","getItem","window","location","href","errorMessage","textContent","error","console"],"version":3,"file":"login.727ebc7a.js.map"}